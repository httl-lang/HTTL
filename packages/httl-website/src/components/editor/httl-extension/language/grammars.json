{
  "name": "httl",
  "scopeName": "source.httl",
  "fileTypes": [
    "httl"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#request"
    },
    {
      "name": "httl.ext",
      "match": "^(@)([^\\s:]+\\s*:)(?:(\\{[^}]+\\})|([^{}]+)|\\s+)+$",
      "captures": {
        "0": {
          "name": "string.other.httl"
        },
        "1": {
          "name": "keyword.other.httl"
        },
        "2": {
          "name": "variable.other.httl"
        },
        "3": {
          "name": "support.type.property-name.json.comments"
        },
        "4": {
          "name": "string.other.httl"
        }
      }
    },
    {
      "name": "httl.headers",
      "match": "^([^\\s:]+)\\s*(:)(?:(\\{[^}]+\\})|([^{}]+)|\\s+)+$",
      "captures": {
        "0": {
          "name": "string.other.httl"
        },
        "1": {
          "name": "entity.name.tag.httl"
        },
        "2": {
          "name": "keyword.other.httl"
        },
        "3": {
          "name": "support.type.property-name.json.comments"
        },
        "4": {
          "name": "string.other.httl"
        }
      }
    },
    {
      "name": "httl.keyword.control",
      "match": "(?:\\s+|^)(assert|as|use)\\s+",
      "captures": {
        "1": {
          "name": "keyword.control.httl"
        }
      }
    },
    {
      "name": "httl.request.body.type",
      "match": "(?:\\s+|^)(formdata|urlencoded|bin|raw)\\s+",
      "captures": {
        "1": {
          "name": "entity.name.function.ts"
        }
      }
    },
    {
      "include": "#js-value"
    }
  ],
  "repository": {
    "request": {
      "name": "httl.request",
      "match": "(?i)^(?:\\s*(get|post|put|delete|patch|head|options|connect|trace|lock|unlock|propfind|proppatch|copy|move|mkcol|mkcalendar|acl|search)\\s+)\\s*([^\\s]+)\\s*",
      "captures": {
        "1": {
          "name": "keyword.control.httl"
        },
        "2": {
          "name": "const.language.httl"
        }
      }
    },
    "array": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.array.begin.json.comments"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.array.end.json.comments"
        }
      },
      "name": "meta.structure.array.json.comments",
      "patterns": [
        {
          "include": "#js-value"
        },
        {
          "match": ",",
          "name": "punctuation.separator.array.json.comments"
        },
        {
          "match": "[^\\s\\]]",
          "name": "invalid.illegal.expected-array-separator.json.comments"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.json.comments"
            }
          },
          "match": "(#).*$\\n?",
          "name": "comment.line.double-slash.js"
        }
      ]
    },
    "constant": {
      "match": "\\b(?:true|false|null)\\b",
      "name": "constant.language.json.comments"
    },
    "number": {
      "match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
      "name": "constant.numeric.json.comments"
    },
    "object": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.begin.json.comments"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end.json.comments"
        }
      },
      "name": "meta.structure.dictionary.json.comments",
      "patterns": [
        {
          "comment": "the JSON object key",
          "include": "#objectkey"
        },
        {
          "comment": "the JSON object string key",
          "include": "#objectkey-string"
        },
        {
          "include": "#comments"
        },
        {
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.dictionary.key-value.json.comments"
            }
          },
          "end": "(,)|(?=\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.dictionary.pair.json.comments"
            }
          },
          "name": "meta.structure.dictionary.value.json.comments",
          "patterns": [
            {
              "comment": "the JSON object value",
              "include": "#js-value"
            },
            {
              "match": "[^\\s,]",
              "name": "invalid.illegal.expected-dictionary-separator.json.comments"
            }
          ]
        },
        {
          "match": "[^\\s\\}]",
          "name": "invalid.illegal.expected-dictionary-separator.json.comments"
        }
      ]
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.json.comments"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.json.comments"
        }
      },
      "name": "string.quoted.double.json.comments",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "objectkey-string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.begin.json.comments"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.end.json.comments"
        }
      },
      "name": "support.type.property-name.json.comments",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "objectkey": {
      "patterns": [
        {
          "name": "meta.object.member.js",
          "match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js"
            }
          }
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
          "name": "constant.character.escape.json.comments"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape.json.comments"
        },
        {
          "name": "support.type.property-name.json.comments",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.begin.json.comments"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.dictionary.end.json.comments"
            }
          }
        }
      ]
    },
    "js-value": {
      "patterns": [
        {
          "include": "#constant"
        },
        {
          "include": "#number"
        },
        {
          "match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*",
          "captures": {
            "0": {
              "name": "source.httl"
            }
          }
        },
        {
          "include": "#string"
        },
        {
          "include": "#array"
        },
        {
          "include": "#object"
        },
        {
          "include": "#comments"
        }
      ]
    }
  }
}